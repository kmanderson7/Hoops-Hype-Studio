import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
export function AnalysisStage({ tasks, processingProgress, highlights, beatMarkers, energyCurve, onProceed, }) {
    return (_jsxs("section", { className: "space-y-6", children: [_jsxs("header", { className: "flex items-start justify-between gap-4", children: [_jsxs("div", { children: [_jsx("h2", { className: "text-xl font-semibold text-white", children: "AI Pipeline" }), _jsx("p", { className: "text-sm text-slate-400", children: "Real-time breakdown of highlight detection, momentum scoring, and beat grid mapping." })] }), _jsxs("span", { className: "rounded-full border border-indigo-400/30 bg-indigo-500/10 px-3 py-1 text-xs uppercase tracking-[0.18em] text-indigo-200", children: [Math.round(processingProgress * 100), "% Complete"] })] }), _jsxs("div", { className: "rounded-3xl border border-white/10 bg-slate-900/60 p-5 backdrop-blur", children: [_jsx("div", { className: "h-2 w-full overflow-hidden rounded-full bg-slate-800", children: _jsx("div", { className: "h-full rounded-full bg-gradient-to-r from-indigo-400 via-sky-400 to-emerald-400 transition-[width]", style: { width: `${Math.round(processingProgress * 100)}%` } }) }), _jsx("ul", { className: "mt-5 grid gap-3 md:grid-cols-2", children: tasks.map((task) => (_jsxs("li", { className: "rounded-2xl border border-white/10 bg-slate-950/50 p-4 text-sm text-slate-200", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("p", { className: "font-semibold text-white", children: task.label }), _jsx("span", { className: `inline-flex items-center rounded-full px-2 py-0.5 text-[10px] uppercase tracking-[0.16em] ${task.status === 'done'
                                                ? 'border border-emerald-400/30 bg-emerald-400/10 text-emerald-200'
                                                : task.status === 'running'
                                                    ? 'border border-indigo-400/30 bg-indigo-500/10 text-indigo-200'
                                                    : 'border border-slate-600 bg-slate-800 text-slate-400'}`, children: task.status === 'done'
                                                ? 'Complete'
                                                : task.status === 'running'
                                                    ? 'Running'
                                                    : 'Queued' })] }), _jsx("p", { className: "mt-2 text-xs text-slate-400", children: task.description }), _jsx("div", { className: "mt-3 h-1.5 w-full overflow-hidden rounded-full bg-slate-800", children: _jsx("div", { className: "h-full rounded-full bg-gradient-to-r from-indigo-400 to-emerald-400 transition-[width]", style: { width: `${task.progress}%` } }) })] }, task.id))) })] }), highlights.length > 0 && (_jsxs("div", { className: "rounded-3xl border border-white/10 bg-slate-900/70 p-5 backdrop-blur", children: [_jsxs("div", { className: "flex flex-wrap items-baseline justify-between gap-3", children: [_jsxs("div", { children: [_jsx("p", { className: "text-xs uppercase tracking-[0.18em] text-indigo-200/80", children: "Highlight Board" }), _jsx("h3", { className: "mt-1 text-lg font-semibold text-white", children: "Auto-selected hype moments" })] }), _jsx("button", { type: "button", onClick: onProceed, className: "rounded-full border border-indigo-400/50 bg-indigo-500/10 px-4 py-1.5 text-sm font-medium text-indigo-100 transition hover:bg-indigo-500/20", children: "Advance to Music Intelligence" })] }), _jsx("div", { className: "mt-5 grid gap-4 lg:grid-cols-2", children: highlights.map((highlight) => (_jsxs("article", { className: "flex flex-col gap-3 rounded-2xl border border-white/10 bg-slate-950/60 p-4", children: [_jsxs("div", { className: "flex items-center justify-between text-xs uppercase tracking-[0.16em] text-indigo-200/70", children: [_jsx("span", { children: highlight.timestamp }), _jsx("span", { children: highlight.action })] }), _jsx("p", { className: "text-sm font-medium text-white", children: highlight.descriptor }), _jsxs("dl", { className: "grid grid-cols-3 gap-2 text-[11px] uppercase tracking-[0.12em] text-slate-400", children: [_jsx(HighlightStat, { label: "Score", value: `${Math.round(highlight.score * 100)}%` }), _jsx(HighlightStat, { label: "Motion", value: `${Math.round(highlight.motion * 100)}%` }), _jsx(HighlightStat, { label: "Audio", value: `${Math.round(highlight.audioPeak * 100)}%` })] })] }, highlight.id))) })] })), (beatMarkers.length > 0 || energyCurve.length > 0) && (_jsxs("div", { className: "rounded-3xl border border-white/10 bg-slate-900/70 p-5 backdrop-blur", children: [_jsx("div", { className: "flex items-baseline justify-between gap-3", children: _jsxs("div", { children: [_jsx("p", { className: "text-xs uppercase tracking-[0.18em] text-indigo-200/80", children: "Beat Grid & Momentum" }), _jsx("h3", { className: "mt-1 text-lg font-semibold text-white", children: "Sync map locked to energy spikes" })] }) }), _jsxs("div", { className: "mt-4 grid gap-4 lg:grid-cols-[2fr,3fr]", children: [_jsxs("div", { className: "rounded-2xl border border-white/10 bg-slate-950/60 p-4", children: [_jsx("p", { className: "text-xs uppercase tracking-[0.16em] text-slate-400", children: "Beat Markers" }), _jsx("div", { className: "mt-3 flex h-24 items-end gap-1 rounded-xl border border-white/10 bg-slate-900/80 p-3", children: beatMarkers.map((marker) => (_jsx("div", { className: "w-full rounded-full bg-gradient-to-t from-indigo-500/20 via-indigo-400/60 to-indigo-200/80", style: { height: `${40 + marker.intensity * 50}%` } }, marker.id))) })] }), _jsxs("div", { className: "rounded-2xl border border-white/10 bg-slate-950/60 p-4", children: [_jsx("p", { className: "text-xs uppercase tracking-[0.16em] text-slate-400", children: "Momentum Arc" }), _jsx("div", { className: "mt-3 h-32 rounded-xl border border-white/10 bg-gradient-to-br from-slate-900 via-slate-900/40 to-slate-900/80 p-3", children: _jsxs("svg", { viewBox: "0 0 320 120", className: "h-full w-full", children: [_jsx("polyline", { points: energyCurve
                                                        .map((value, index) => {
                                                        const x = (index / Math.max(energyCurve.length - 1, 1)) * 320;
                                                        const y = 110 - value * 90;
                                                        return `${x},${y}`;
                                                    })
                                                        .join(' '), fill: "none", stroke: "url(#gradient)", strokeWidth: 3, strokeLinecap: "round" }), _jsx("defs", { children: _jsxs("linearGradient", { id: "gradient", x1: "0%", y1: "0%", x2: "100%", y2: "0%", children: [_jsx("stop", { offset: "0%", stopColor: "#6366f1" }), _jsx("stop", { offset: "50%", stopColor: "#38bdf8" }), _jsx("stop", { offset: "100%", stopColor: "#34d399" })] }) })] }) })] })] })] }))] }));
}
function HighlightStat({ label, value }) {
    return (_jsxs("div", { className: "rounded-lg border border-white/10 bg-slate-900/60 p-2 text-center text-xs text-slate-300", children: [_jsx("p", { className: "text-[10px] uppercase tracking-[0.18em] text-slate-500", children: label }), _jsx("p", { className: "mt-1 text-sm font-semibold text-white", children: value })] }));
}
