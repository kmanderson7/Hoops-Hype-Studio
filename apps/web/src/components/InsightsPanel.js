import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const metricLabel = (value) => `${Math.round(value * 100)}%`;
export function InsightsPanel({ fileInfo, insights, highlights, selectedTrack }) {
    return (_jsxs("aside", { className: "space-y-5 rounded-3xl border border-white/10 bg-slate-900/70 p-6 backdrop-blur", children: [_jsxs("div", { children: [_jsx("p", { className: "text-xs uppercase tracking-[0.2em] text-indigo-300/70", children: "Session Insights" }), _jsx("h2", { className: "mt-1 text-2xl font-semibold", children: "Hype Forecast" }), _jsx("p", { className: "mt-2 text-sm text-slate-400", children: "Real-time signal from the AI pipeline. Update auto-refreshes as footage is analyzed, scored, and matched to music." })] }), fileInfo ? (_jsxs("div", { className: "rounded-2xl border border-white/10 bg-slate-950/60 p-4", children: [_jsx("p", { className: "text-xs uppercase tracking-[0.16em] text-slate-500", children: "Footage" }), _jsxs("div", { className: "mt-2 space-y-1 text-sm", children: [_jsx("p", { className: "font-medium text-slate-100", children: fileInfo.name }), _jsxs("div", { className: "flex flex-wrap gap-3 text-slate-400", children: [_jsx("span", { children: fileInfo.duration }), _jsx("span", { children: fileInfo.sizeLabel }), _jsx("span", { children: fileInfo.resolution }), _jsxs("span", { children: [fileInfo.fps, " FPS"] })] })] })] })) : (_jsx("div", { className: "rounded-2xl border border-dashed border-slate-700 p-4 text-sm text-slate-500", children: "Upload a game tape to unlock actionable insights, highlight scores, and music intelligence." })), _jsxs("div", { className: "grid grid-cols-3 gap-3 rounded-2xl border border-white/10 bg-slate-950/50 p-4 text-center", children: [_jsx(MetricCard, { label: "Action Accuracy", value: metricLabel(insights.accuracy) }), _jsx(MetricCard, { label: "Beat Alignment", value: metricLabel(insights.beatAlignment) }), _jsx(MetricCard, { label: "Crowd Energy", value: metricLabel(insights.crowdEnergy) })] }), highlights.length > 0 && (_jsxs("div", { className: "rounded-2xl border border-white/10 bg-slate-950/70 p-4", children: [_jsx("p", { className: "text-xs uppercase tracking-[0.16em] text-indigo-200", children: "Top Moments" }), _jsx("ul", { className: "mt-3 space-y-3 text-sm text-slate-300", children: highlights.slice(0, 3).map((highlight) => (_jsxs("li", { className: "rounded-lg border border-white/10 bg-slate-900/60 p-3", children: [_jsxs("div", { className: "flex items-center justify-between text-xs uppercase text-indigo-200", children: [_jsx("span", { children: highlight.timestamp }), _jsx("span", { children: highlight.action })] }), _jsx("p", { className: "mt-1 text-sm font-medium text-white/90", children: highlight.descriptor }), _jsxs("div", { className: "mt-2 flex items-center gap-3 text-xs uppercase tracking-[0.12em] text-slate-500", children: [_jsxs("span", { children: ["Score ", Math.round(highlight.score * 100)] }), _jsxs("span", { children: ["Motion ", Math.round(highlight.motion * 100)] }), _jsxs("span", { children: ["Peak ", Math.round(highlight.audioPeak * 100)] })] })] }, highlight.id))) })] })), selectedTrack && (_jsxs("div", { className: "rounded-2xl border border-indigo-500/30 bg-indigo-500/10 p-4", children: [_jsx("p", { className: "text-xs uppercase tracking-[0.16em] text-indigo-200/90", children: "Selected Track" }), _jsxs("div", { className: "mt-2", children: [_jsx("p", { className: "text-base font-semibold text-white", children: selectedTrack.title }), _jsx("p", { className: "text-sm text-indigo-100/80", children: selectedTrack.artist })] }), _jsxs("dl", { className: "mt-3 grid grid-cols-2 gap-x-4 gap-y-2 text-xs text-indigo-100/70", children: [_jsxs("div", { children: [_jsx("dt", { className: "uppercase tracking-[0.12em] text-indigo-200/70", children: "BPM" }), _jsx("dd", { className: "text-sm font-semibold text-white", children: selectedTrack.bpm })] }), _jsxs("div", { children: [_jsx("dt", { className: "uppercase tracking-[0.12em] text-indigo-200/70", children: "Mood" }), _jsx("dd", { className: "text-sm font-semibold text-white", children: selectedTrack.mood })] }), _jsxs("div", { children: [_jsx("dt", { className: "uppercase tracking-[0.12em] text-indigo-200/70", children: "Key" }), _jsx("dd", { className: "text-sm font-semibold text-white", children: selectedTrack.key })] }), _jsxs("div", { children: [_jsx("dt", { className: "uppercase tracking-[0.12em] text-indigo-200/70", children: "Match" }), _jsxs("dd", { className: "text-sm font-semibold text-white", children: [selectedTrack.matchScore, "%"] })] })] })] })), insights.notes.length > 0 && (_jsxs("div", { className: "space-y-2 rounded-2xl border border-white/10 bg-slate-950/70 p-4", children: [_jsx("p", { className: "text-xs uppercase tracking-[0.16em] text-slate-500", children: "Analyst Notes" }), _jsx("ul", { className: "space-y-2 text-sm text-slate-300", children: insights.notes.map((note, index) => (_jsxs("li", { className: "flex gap-2", children: [_jsx("span", { className: "mt-1 h-1.5 w-1.5 flex-shrink-0 rounded-full bg-indigo-400" }), _jsx("span", { children: note })] }, index))) })] }))] }));
}
function MetricCard({ label, value }) {
    return (_jsxs("div", { className: "rounded-2xl border border-white/10 bg-slate-900/70 p-3", children: [_jsx("p", { className: "text-xs uppercase tracking-[0.16em] text-slate-500", children: label }), _jsx("p", { className: "mt-1 text-xl font-semibold text-white", children: value })] }));
}
